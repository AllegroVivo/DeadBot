from __future__ import annotations

from typing import TYPE_CHECKING, Optional

from Utils import *

if TYPE_CHECKING:
    from Classes import DeadBot, Application
################################################################################

__all__ = ("RoleplayExperience",)

################################################################################
class RoleplayExperience:

    __slots__ = (
        "_parent",
        "_choice",
        "_level",
        "_nsfw",
        "_sample",
    )

################################################################################
##### INITIALIZATION ###########################################################
################################################################################
    def __init__(self, parent: Application, **kwargs):

        self._parent: Application = parent

        self._choice: bool = kwargs.pop("choice", False)
        self._level: RPLevel = kwargs.pop("level", RPLevel.Null)
        self._nsfw: bool = kwargs.pop("nsfw", False)
        self._sample: Optional[str] = kwargs.pop("sample", None)

################################################################################
    @classmethod
    def new(cls, parent: Application) -> RoleplayExperience:

        pass

################################################################################
##### INTERNAL METHODS #########################################################
################################################################################

################################################################################
##### PROPERTIES ###############################################################
################################################################################

################################################################################
##### PUBLIC METHODS ###########################################################
################################################################################
